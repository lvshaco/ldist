---

- include: install.yml
  tags: [ 'install' ]

- include: db.yml mysql_db={{mysql_initdb}} mysql_users={{mysql_initdb_users}}
  tags: [ 'database' ]

#- name: Create the replication users
#  mysql_user: name={{ item.name }}  host="%" password={{ item.pass }}  
#                priv=*.*:"REPLICATION SLAVE" state=present
#  with_items: "{{ mysql_repl_user }}"
#  when: mysql_repl_user != "none" and mysql_repl_role == 'master'
#
#- name: Check if slave is already configured for replication
#  mysql_replication: mode=getslave
#  ignore_errors: true
#  register: slave
#  when: mysql_repl_role == 'slave'
#
#- name: Ensure the hostname entry for master is available for the client.
#  lineinfile: dest=/etc/hosts regexp="{{ mysql_repl_master }}" line="{{ hostvars[mysql_repl_master].ansible_default_ipv4.address + "   " + mysql_repl_master }}" state=present
#  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
#
#- name: Get the current master servers replication status
#  mysql_replication: mode=getmaster
#  delegate_to: "{{ mysql_repl_master }}"
#  register: repl_stat
#  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
#
#- name: Change the master in slave to start the replication
#  mysql_replication: mode=changemaster master_host={{ mysql_repl_master }} master_log_file={{ repl_stat.File }} master_log_pos={{ repl_stat.Position }} master_user={{ mysql_repl_user[0].name }} master_password={{ mysql_repl_user[0].pass }}
#  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined
